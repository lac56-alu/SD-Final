/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: lac56@gcloud.ua.es
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using MySql.Data.MySqlClient;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RegistroApiController : ControllerBase
    {
        private MySqlConnection conn;
        /// <summary>
        /// registro
        /// </summary>
        /// <remarks>Borrar usuario </remarks>
        /// <param name="restKey"></param>
        /// <param name="nameUser"></param>
        /// <response code="204">usuario borrado correctamente</response>
        /// <response code="404">usuario no encontrado</response>
        [HttpDelete]
        [Route("/lac56-alu/SD-REGISTRY/1.0.0/borrarUsuario/{restKey}/{nameUser}")]
        [ValidateModelState]
        [SwaggerOperation("BorrarUsuarios")]
        public virtual IActionResult BorrarUsuarios([FromRoute][Required]string restKey, [FromRoute][Required]string nameUser)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// registro
        /// </summary>
        /// <remarks>Consultar Todos los Usuarios </remarks>
        /// <param name="restKey"></param>
        /// <response code="200">ok</response>
        /// <response code="404">no hay usuarios</response>
        [HttpGet]
        [Route("/lac56-alu/SD-REGISTRY/1.0.0/consultarTodosUsuarios/{restKey}")]
        [ValidateModelState]
        [SwaggerOperation("ConsultarTodosUsuarios")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "ok")]
        public virtual IActionResult ConsultarTodosUsuarios([FromRoute][Required]string restKey)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"correcto\" : true,\n  \"cadena\" : \"cadena\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
                        : default(InlineResponse2001);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// registro
        /// </summary>
        /// <remarks>Consultar Usuario </remarks>
        /// <param name="restKey"></param>
        /// <param name="nameUser"></param>
        /// <response code="200">ok</response>
        /// <response code="404">usuario no encontrado</response>
        [HttpGet]
        [Route("/lac56-alu/SD-REGISTRY/1.0.0/consultarUsuario/{restKey}/{nameUser}")]
        [ValidateModelState]
        [SwaggerOperation("ConsultarUsuario")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "ok")]
        public virtual IActionResult ConsultarUsuario([FromRoute][Required]string restKey, [FromRoute][Required]string nameUser)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"correcto\" : true,\n  \"cadena\" : \"cadena\",\n  \"usuario\" : {\n    \"password\" : \"password\",\n    \"name\" : \"name\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// registro
        /// </summary>
        /// <remarks>Modificar usuario </remarks>
        /// <param name="restKey"></param>
        /// <param name="body">Modificar Usuario</param>
        /// <response code="201">usuario modificado correctamente</response>
        /// <response code="404">sala no encontrada</response>
        [HttpPut]
        [Route("/lac56-alu/SD-REGISTRY/1.0.0/modificarUsuario/{restKey}")]
        [ValidateModelState]
        [SwaggerOperation("ModificarUsuario")]
        public virtual IActionResult ModificarUsuario([FromRoute][Required]string restKey, [FromBody]UserItemMod body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// registro
        /// </summary>
        /// <remarks>Crear usuarios </remarks>
        /// <param name="restKey"></param>
        /// <param name="body">Nuevo Usuario</param>
        /// <response code="201">usuario creado correctamente</response>
        /// <response code="400">bad input parameter</response>
        [HttpPost]
        [Route("/lac56-alu/SD-REGISTRY/1.0.0/nuevoUsuario/{restKey}")]
        [ValidateModelState]
        [SwaggerOperation("NuevoUsuario")]
        public virtual IActionResult NuevoUsuario([FromRoute][Required]string restKey, [FromBody]UserItem body)
        {
            string stringConexion = "server=localhost;port=3306;user id=luis;password=root;database=sd;SslMode=none";
            InlineResponse2001 resp = new InlineResponse2001();
            try
            {
                conn = new MySqlConnection(stringConexion);
                conn.Open();
                MySqlCommand cmd2 = new MySqlCommand();
                cmd2.Connection = conn;
                cmd2.CommandText = "INSERT INTO sd.usuarios (nombre, password) VALUES ('" + body.Name.ToString() + "', '" + body.Password.ToString() + "')";
                cmd2.ExecuteNonQuery();

                resp.Correcto = true;
                resp.Cadena = "Se ha creado el usuario";
                conn.Close();
            }
            catch (MySqlException e)
            {
                resp.Correcto = false;
                resp.Cadena = "Error al realizar el crear";
                conn.Close();
                return StatusCode(500, resp);
            }

            return StatusCode(201, resp);
        }
    }
}
